// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cox_base_hazard_cpp
arma::vec cox_base_hazard_cpp(const arma::vec& beta, const arma::uword& nused, const arma::uword& K, const arma::vec& start, const arma::vec& tstop, const arma::uvec& event, const arma::uvec& sort1, const arma::uvec& sort2, const arma::mat& covar, const arma::vec& offset, const arma::uword& method);
RcppExport SEXP _penPHcure_cox_base_hazard_cpp(SEXP betaSEXP, SEXP nusedSEXP, SEXP KSEXP, SEXP startSEXP, SEXP tstopSEXP, SEXP eventSEXP, SEXP sort1SEXP, SEXP sort2SEXP, SEXP covarSEXP, SEXP offsetSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type nused(nusedSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort1(sort1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort2(sort2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covar(covarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_base_hazard_cpp(beta, nused, K, start, tstop, event, sort1, sort2, covar, offset, method));
    return rcpp_result_gen;
END_RCPP
}
// fit_pen_cox_cpp
Rcpp::List fit_pen_cox_cpp(const arma::vec& beta_SV, const arma::uword& nobs, const arma::vec& tstart, const arma::vec& tstop, const arma::uvec& sort1, const arma::uvec& sort2, const arma::uvec& status, const arma::vec& fail_times, const arma::vec& nfails, const arma::vec& offset, const arma::mat& Z, const arma::uword& method, const bool& warnings, const arma::uword& maxiter, const double& tol, const arma::uword& N, const arma::vec& tun_par, const arma::vec& pen_weights, const std::string& pen_type, const double& epsilon);
RcppExport SEXP _penPHcure_fit_pen_cox_cpp(SEXP beta_SVSEXP, SEXP nobsSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sort1SEXP, SEXP sort2SEXP, SEXP statusSEXP, SEXP fail_timesSEXP, SEXP nfailsSEXP, SEXP offsetSEXP, SEXP ZSEXP, SEXP methodSEXP, SEXP warningsSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP tun_parSEXP, SEXP pen_weightsSEXP, SEXP pen_typeSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_SV(beta_SVSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort1(sort1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort2(sort2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fail_times(fail_timesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nfails(nfailsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool& >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tun_par(tun_parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pen_weights(pen_weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type pen_type(pen_typeSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_pen_cox_cpp(beta_SV, nobs, tstart, tstop, sort1, sort2, status, fail_times, nfails, offset, Z, method, warnings, maxiter, tol, N, tun_par, pen_weights, pen_type, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// fit_cox_cpp
Rcpp::List fit_cox_cpp(const arma::vec& beta_SV, const arma::uword& nobs, const arma::vec& tstart, const arma::vec& tstop, const arma::uvec& sort1, const arma::uvec& sort2, const arma::uvec& status, const arma::vec& offset, const arma::mat& Z, const arma::uword& method, const bool& warnings, const arma::uword& maxiter, const double& tol);
RcppExport SEXP _penPHcure_fit_cox_cpp(SEXP beta_SVSEXP, SEXP nobsSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sort1SEXP, SEXP sort2SEXP, SEXP statusSEXP, SEXP offsetSEXP, SEXP ZSEXP, SEXP methodSEXP, SEXP warningsSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_SV(beta_SVSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort1(sort1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort2(sort2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool& >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_cox_cpp(beta_SV, nobs, tstart, tstop, sort1, sort2, status, offset, Z, method, warnings, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// fit_pen_cure_cpp
List fit_pen_cure_cpp(const arma::vec& b_SV, const arma::vec& beta_SV, const arma::vec& base_hazard_SV, const arma::vec& tstart, const arma::vec& tstop, const arma::uvec& sort1, const arma::uvec& sort2, const arma::uvec& status, const arma::vec& fail_times, const arma::vec& nfails, const arma::uvec& nobs_i, const arma::vec& status_FIX, const arma::mat& X_FIX, const arma::mat& Z, const arma::uword& method, const bool& warnings, const arma::uword& maxiterNR, const arma::uword& maxiterEM, const bool& constraint, const double& tol, const std::string& pen_type, const arma::vec& tun_parCURE, const arma::vec& tun_parSURV, const arma::vec& pen_weightsCURE, const arma::vec& pen_weightsSURV, const double& epsilon, const double& thres_zero);
RcppExport SEXP _penPHcure_fit_pen_cure_cpp(SEXP b_SVSEXP, SEXP beta_SVSEXP, SEXP base_hazard_SVSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sort1SEXP, SEXP sort2SEXP, SEXP statusSEXP, SEXP fail_timesSEXP, SEXP nfailsSEXP, SEXP nobs_iSEXP, SEXP status_FIXSEXP, SEXP X_FIXSEXP, SEXP ZSEXP, SEXP methodSEXP, SEXP warningsSEXP, SEXP maxiterNRSEXP, SEXP maxiterEMSEXP, SEXP constraintSEXP, SEXP tolSEXP, SEXP pen_typeSEXP, SEXP tun_parCURESEXP, SEXP tun_parSURVSEXP, SEXP pen_weightsCURESEXP, SEXP pen_weightsSURVSEXP, SEXP epsilonSEXP, SEXP thres_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b_SV(b_SVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_SV(beta_SVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_hazard_SV(base_hazard_SVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort1(sort1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sort2(sort2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fail_times(fail_timesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nfails(nfailsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nobs_i(nobs_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type status_FIX(status_FIXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_FIX(X_FIXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool& >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiterNR(maxiterNRSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiterEM(maxiterEMSEXP);
    Rcpp::traits::input_parameter< const bool& >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type pen_type(pen_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tun_parCURE(tun_parCURESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tun_parSURV(tun_parSURVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pen_weightsCURE(pen_weightsCURESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pen_weightsSURV(pen_weightsSURVSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type thres_zero(thres_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_pen_cure_cpp(b_SV, beta_SV, base_hazard_SV, tstart, tstop, sort1, sort2, status, fail_times, nfails, nobs_i, status_FIX, X_FIX, Z, method, warnings, maxiterNR, maxiterEM, constraint, tol, pen_type, tun_parCURE, tun_parSURV, pen_weightsCURE, pen_weightsSURV, epsilon, thres_zero));
    return rcpp_result_gen;
END_RCPP
}
// datagen_cure_cpp
Rcpp::List datagen_cure_cpp(arma::vec beta0, arma::vec b0, double lambdaC, arma::vec S, arma::uword N, arma::cube Z, arma::mat X, arma::vec C, double gamma);
RcppExport SEXP _penPHcure_datagen_cure_cpp(SEXP beta0SEXP, SEXP b0SEXP, SEXP lambdaCSEXP, SEXP SSEXP, SEXP NSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP CSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type lambdaC(lambdaCSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(datagen_cure_cpp(beta0, b0, lambdaC, S, N, Z, X, C, gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_survival_cpp
arma::vec compute_survival_cpp(const arma::vec& beta, const arma::vec& base_hazard, const arma::vec& tstart, const arma::vec& tstop, const arma::uword& N, const arma::uword& nobs, const arma::vec& fail_times, const arma::mat& Z, const bool& constraint);
RcppExport SEXP _penPHcure_compute_survival_cpp(SEXP betaSEXP, SEXP base_hazardSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP NSEXP, SEXP nobsSEXP, SEXP fail_timesSEXP, SEXP ZSEXP, SEXP constraintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_hazard(base_hazardSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fail_times(fail_timesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const bool& >::type constraint(constraintSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_survival_cpp(beta, base_hazard, tstart, tstop, N, nobs, fail_times, Z, constraint));
    return rcpp_result_gen;
END_RCPP
}
// fit_cure_cpp
List fit_cure_cpp(arma::vec b_SV, arma::vec beta_SV, arma::vec base_hazard_SV, arma::vec tstart, arma::vec tstop, arma::uvec sort1, arma::uvec sort2, arma::uvec status, arma::vec fail_times, arma::vec nfails, arma::uvec nobs_i, arma::vec status_FIX, arma::mat X_FIX, arma::mat Z, arma::uword method, bool warnings, arma::uword maxiterNR, arma::uword maxiterEM, double tol, bool constraint);
RcppExport SEXP _penPHcure_fit_cure_cpp(SEXP b_SVSEXP, SEXP beta_SVSEXP, SEXP base_hazard_SVSEXP, SEXP tstartSEXP, SEXP tstopSEXP, SEXP sort1SEXP, SEXP sort2SEXP, SEXP statusSEXP, SEXP fail_timesSEXP, SEXP nfailsSEXP, SEXP nobs_iSEXP, SEXP status_FIXSEXP, SEXP X_FIXSEXP, SEXP ZSEXP, SEXP methodSEXP, SEXP warningsSEXP, SEXP maxiterNRSEXP, SEXP maxiterEMSEXP, SEXP tolSEXP, SEXP constraintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type b_SV(b_SVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_SV(beta_SVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_hazard_SV(base_hazard_SVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sort1(sort1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sort2(sort2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fail_times(fail_timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nfails(nfailsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nobs_i(nobs_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type status_FIX(status_FIXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_FIX(X_FIXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiterNR(maxiterNRSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiterEM(maxiterEMSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint(constraintSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_cure_cpp(b_SV, beta_SV, base_hazard_SV, tstart, tstop, sort1, sort2, status, fail_times, nfails, nobs_i, status_FIX, X_FIX, Z, method, warnings, maxiterNR, maxiterEM, tol, constraint));
    return rcpp_result_gen;
END_RCPP
}
// fit_pen_logit_cpp
Rcpp::List fit_pen_logit_cpp(const arma::vec& b_SV, const arma::mat& X, const arma::vec& Y, const bool& warnings, const arma::uword& maxiter, const double& tol, const arma::uword& N, const arma::vec& tun_par, const arma::vec& pen_weights, const std::string& pen_type, const double& epsilon);
RcppExport SEXP _penPHcure_fit_pen_logit_cpp(SEXP b_SVSEXP, SEXP XSEXP, SEXP YSEXP, SEXP warningsSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP tun_parSEXP, SEXP pen_weightsSEXP, SEXP pen_typeSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b_SV(b_SVSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool& >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tun_par(tun_parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pen_weights(pen_weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type pen_type(pen_typeSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_pen_logit_cpp(b_SV, X, Y, warnings, maxiter, tol, N, tun_par, pen_weights, pen_type, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// fit_logit_cpp
Rcpp::List fit_logit_cpp(const arma::vec& b_SV, const arma::mat& X, const arma::vec& Y, const bool& warnings, const arma::uword& maxiter, const double& tol);
RcppExport SEXP _penPHcure_fit_logit_cpp(SEXP b_SVSEXP, SEXP XSEXP, SEXP YSEXP, SEXP warningsSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b_SV(b_SVSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool& >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_logit_cpp(b_SV, X, Y, warnings, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// initialize_PHcure_cpp
Rcpp::List initialize_PHcure_cpp(arma::vec tstart, arma::vec tstop, arma::uvec status, arma::mat X, std::string whichX);
RcppExport SEXP _penPHcure_initialize_PHcure_cpp(SEXP tstartSEXP, SEXP tstopSEXP, SEXP statusSEXP, SEXP XSEXP, SEXP whichXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type status(statusSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type whichX(whichXSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_PHcure_cpp(tstart, tstop, status, X, whichX));
    return rcpp_result_gen;
END_RCPP
}
// initialize_PHcure_noX_cpp
Rcpp::List initialize_PHcure_noX_cpp(arma::vec tstart, arma::vec tstop, arma::uvec status);
RcppExport SEXP _penPHcure_initialize_PHcure_noX_cpp(SEXP tstartSEXP, SEXP tstopSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tstop(tstopSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_PHcure_noX_cpp(tstart, tstop, status));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_penPHcure_cox_base_hazard_cpp", (DL_FUNC) &_penPHcure_cox_base_hazard_cpp, 11},
    {"_penPHcure_fit_pen_cox_cpp", (DL_FUNC) &_penPHcure_fit_pen_cox_cpp, 20},
    {"_penPHcure_fit_cox_cpp", (DL_FUNC) &_penPHcure_fit_cox_cpp, 13},
    {"_penPHcure_fit_pen_cure_cpp", (DL_FUNC) &_penPHcure_fit_pen_cure_cpp, 27},
    {"_penPHcure_datagen_cure_cpp", (DL_FUNC) &_penPHcure_datagen_cure_cpp, 9},
    {"_penPHcure_compute_survival_cpp", (DL_FUNC) &_penPHcure_compute_survival_cpp, 9},
    {"_penPHcure_fit_cure_cpp", (DL_FUNC) &_penPHcure_fit_cure_cpp, 20},
    {"_penPHcure_fit_pen_logit_cpp", (DL_FUNC) &_penPHcure_fit_pen_logit_cpp, 11},
    {"_penPHcure_fit_logit_cpp", (DL_FUNC) &_penPHcure_fit_logit_cpp, 6},
    {"_penPHcure_initialize_PHcure_cpp", (DL_FUNC) &_penPHcure_initialize_PHcure_cpp, 5},
    {"_penPHcure_initialize_PHcure_noX_cpp", (DL_FUNC) &_penPHcure_initialize_PHcure_noX_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_penPHcure(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
